import os
import json
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from telegram.constants import ChatMemberStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8235892772:AAEUSJHCF_eUBkJtS3gUdRHbRQIf6W7HfiU"
DB_FILE = 'members_db.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def load_db():
    if os.path.exists(DB_FILE):
        try:
            with open(DB_FILE, 'r') as f:
                data = f.read()
                if not data.strip():  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
                    return {}
                return {int(k): set(v) for k, v in json.loads(data).items()}
        except (json.JSONDecodeError, KeyError):
            return {}
    return {}

def save_db(data):
    with open(DB_FILE, 'w') as f:
        json.dump({str(k): list(v) for k, v in data.items()}, f, indent=2)

group_members = load_db()

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {update.message.text}")

async def list_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /list_commands - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    /members - –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    /update_members - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    """
    await update.message.reply_text(help_text)

async def update_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.chat:
        return

    chat_id = update.message.chat.id
    if chat_id > 0:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø!")
        return

    try:
        current_members = set()
        async for member in context.bot.get_chat_members(chat_id):
            if member.status not in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
                current_members.add(member.user.id)

        old_members = group_members.get(chat_id, set())
        group_members[chat_id] = current_members
        save_db(group_members)

        report = f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(current_members)}"
        if added := current_members - old_members:
            report += f"\n‚ûï –ù–æ–≤—ã–µ: {len(added)}"
        if removed := old_members - current_members:
            report += f"\n‚ûñ –£—à–ª–∏: {len(removed)}"
        
        await update.message.reply_text(report)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"
        )

async def show_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in group_members:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update_members")
        return

    members_list = []
    for user_id in list(group_members[chat_id])[:100]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
        try:
            user = await context.bot.get_chat_member(chat_id, user_id)
            name = user.user.full_name
            members_list.append(f"üë§ {name}")
        except:
            members_list.append(f"üë§ ID:{user_id}")

    await update.message.reply_text(
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(members_list)}):\n" + "\n".join(members_list)
    )

def main():
 # –°–æ–∑–¥–∞–µ–º Application —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–ª–µ—à–µ–π)
    application = (
        Application.builder()
        .token(TOKEN)
        .http_version("1.1")  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é HTTP
        .get_updates_http_version("1.1")
        .build()
    )
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handlers = [
        CommandHandler("list_commands", list_commands),
        CommandHandler("members", show_members),
        CommandHandler("update_members", update_members),
        MessageHandler(filters.TEXT & ~filters.COMMAND, echo)
    ]
    
    for handler in handlers:
        application.add_handler(handler)
    
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(DB_FILE):
        save_db({})
    main()
