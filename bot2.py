from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.constants import ChatMemberStatus
from typing import Dict, Set

TOKEN = "8235892772:AAEUSJHCF_eUBkJtS3gUdRHbRQIf6W7HfiU"

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (chat_id -> set_of_user_ids)
group_members: Dict[int, Set[int]] = {}

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {update.message.text}")
    
async def list_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /list_commands - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    /test - –ø—É—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è
    /members - –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    /update_members - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    await update.message.reply_text(help_text)

async def update_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id > 0:  # –≠—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        current_members = set()
        async for member in context.bot.get_chat_members(chat_id):
            if member.status not in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
                current_members.add(member.user.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if chat_id not in group_members:
            group_members[chat_id] = set()
        
        added = current_members - group_members[chat_id]
        removed = group_members[chat_id] - current_members
        group_members[chat_id] = current_members

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω:\n"
        report += f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(current_members)}\n"
        if added:
            report += f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã: {len(added)}\n"
        if removed:
            report += f"‚ûñ –£–¥–∞–ª–µ–Ω—ã: {len(removed)}\n"
        
        await update.message.reply_text(report)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def show_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in group_members or not group_members[chat_id]:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update_members")
        return

    try:
        members_list = []
        for user_id in group_members[chat_id]:
            user = await context.bot.get_chat_member(chat_id, user_id)
            members_list.append(f"üë§ {user.user.full_name} (@{user.user.username or '–Ω–µ—Ç'})")

        await update.message.reply_text(
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã ({len(members_list)}):\n" + "\n".join(members_list)
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    application.add_handler(CommandHandler("list_commands", list_commands))
    application.add_handler(CommandHandler("members", show_members))
    application.add_handler(CommandHandler("update_members", update_members))
    
    application.run_polling()

if __name__ == '__main__':
    main()
